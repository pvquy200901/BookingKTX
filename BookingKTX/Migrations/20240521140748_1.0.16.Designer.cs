// <auto-generated />
using System;
using System.Collections.Generic;
using BookingKTX.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookingKTX.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240521140748_1.0.16")]
    partial class _1016
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingKTX.Models.SqlAction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_action");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCart", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.ToTable("tb_cart");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCartOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("productID")
                        .HasColumnType("bigint");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("productID");

                    b.ToTable("tb_cartOrder");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCartProduct", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long?>("SqlCartID")
                        .HasColumnType("bigint");

                    b.Property<long?>("SqlOrderID")
                        .HasColumnType("bigint");

                    b.Property<bool>("isFinish")
                        .HasColumnType("boolean");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("productID")
                        .HasColumnType("bigint");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("SqlCartID");

                    b.HasIndex("SqlOrderID");

                    b.HasIndex("productID");

                    b.ToTable("tb_cartProduct");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCustomer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("avarta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("cartID")
                        .HasColumnType("bigint");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("idhub")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("cartID");

                    b.ToTable("tb_customer");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlFile", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.ToTable("tb_file");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlLogOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long?>("actionID")
                        .HasColumnType("bigint");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("orderID")
                        .HasColumnType("bigint");

                    b.Property<long?>("stateID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("actionID");

                    b.HasIndex("orderID");

                    b.HasIndex("stateID");

                    b.HasIndex("userID");

                    b.ToTable("tb_logOrder");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("customerID")
                        .HasColumnType("bigint");

                    b.Property<bool>("isDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("isFinish")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("lastestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("shipperID")
                        .HasColumnType("bigint");

                    b.Property<long?>("shopID")
                        .HasColumnType("bigint");

                    b.Property<long?>("stateID")
                        .HasColumnType("bigint");

                    b.Property<double>("total")
                        .HasColumnType("double precision");

                    b.HasKey("ID");

                    b.HasIndex("customerID");

                    b.HasIndex("shipperID");

                    b.HasIndex("shopID");

                    b.HasIndex("stateID");

                    b.ToTable("tb_order");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlProduct", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("images")
                        .HasColumnType("text[]");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("priceBuy")
                        .HasColumnType("numeric");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("shopID")
                        .HasColumnType("bigint");

                    b.Property<int>("totalBuy")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("shopID");

                    b.ToTable("tb_product");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlRole", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_role");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlShop", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("des")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("lastestTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("typeID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("typeID");

                    b.ToTable("tb_shop");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlState", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_state");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_type");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("idHub")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("images")
                        .HasColumnType("text[]");

                    b.Property<bool>("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("latitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("longitude")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("roleID")
                        .HasColumnType("bigint");

                    b.Property<long?>("shopID")
                        .HasColumnType("bigint");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("roleID");

                    b.HasIndex("shopID");

                    b.ToTable("tb_user");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCartOrder", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlProduct", "product")
                        .WithMany()
                        .HasForeignKey("productID");

                    b.Navigation("product");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCartProduct", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlCart", null)
                        .WithMany("cartProducts")
                        .HasForeignKey("SqlCartID");

                    b.HasOne("BookingKTX.Models.SqlOrder", null)
                        .WithMany("cartProducts")
                        .HasForeignKey("SqlOrderID");

                    b.HasOne("BookingKTX.Models.SqlProduct", "product")
                        .WithMany()
                        .HasForeignKey("productID");

                    b.Navigation("product");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCustomer", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlCart", "cart")
                        .WithMany()
                        .HasForeignKey("cartID");

                    b.Navigation("cart");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlLogOrder", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlAction", "action")
                        .WithMany()
                        .HasForeignKey("actionID");

                    b.HasOne("BookingKTX.Models.SqlOrder", "order")
                        .WithMany("logs")
                        .HasForeignKey("orderID");

                    b.HasOne("BookingKTX.Models.SqlState", "state")
                        .WithMany()
                        .HasForeignKey("stateID");

                    b.HasOne("BookingKTX.Models.SqlUser", "user")
                        .WithMany()
                        .HasForeignKey("userID");

                    b.Navigation("action");

                    b.Navigation("order");

                    b.Navigation("state");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlOrder", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlCustomer", "customer")
                        .WithMany("orders")
                        .HasForeignKey("customerID");

                    b.HasOne("BookingKTX.Models.SqlUser", "shipper")
                        .WithMany("orderShippers")
                        .HasForeignKey("shipperID");

                    b.HasOne("BookingKTX.Models.SqlShop", "shop")
                        .WithMany()
                        .HasForeignKey("shopID");

                    b.HasOne("BookingKTX.Models.SqlState", "state")
                        .WithMany()
                        .HasForeignKey("stateID");

                    b.Navigation("customer");

                    b.Navigation("shipper");

                    b.Navigation("shop");

                    b.Navigation("state");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlProduct", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlShop", "shop")
                        .WithMany("products")
                        .HasForeignKey("shopID");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlShop", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlType", "type")
                        .WithMany()
                        .HasForeignKey("typeID");

                    b.Navigation("type");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlUser", b =>
                {
                    b.HasOne("BookingKTX.Models.SqlRole", "role")
                        .WithMany()
                        .HasForeignKey("roleID");

                    b.HasOne("BookingKTX.Models.SqlShop", "shop")
                        .WithMany("users")
                        .HasForeignKey("shopID");

                    b.Navigation("role");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCart", b =>
                {
                    b.Navigation("cartProducts");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlCustomer", b =>
                {
                    b.Navigation("orders");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlOrder", b =>
                {
                    b.Navigation("cartProducts");

                    b.Navigation("logs");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlShop", b =>
                {
                    b.Navigation("products");

                    b.Navigation("users");
                });

            modelBuilder.Entity("BookingKTX.Models.SqlUser", b =>
                {
                    b.Navigation("orderShippers");
                });
#pragma warning restore 612, 618
        }
    }
}
